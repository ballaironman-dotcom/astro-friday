---
import type { NavItem } from '../types'
import { ThemeSwitch } from 'astro-color-scheme'
import { getPath } from '../utils/path'

interface Props {
  navigations?: NavItem[]
}

const {
  navigations = [],
} = Astro.props
---

<header class="p-2rem flex gap-1.2rem items-center">
  <a href={getPath('home')}>Home</a>

  <i class="flex-1"></i>

  <nav>
    <ul class="gap-1.2rem grid grid-flow-col">
      {navigations.map(item => (
        <li>
          <a
            href={item.link}
            target={item.external ? '_blank' : '_self'}
            class="hoverable-text"
          >
            {
              item.type === 'icon' && item.icon
              ? (
                  <i class={`${item.icon}`}></i>
                )
              : (
                  <>
                    <span class="lt-md:hidden">{item.label}</span>
                    {item.icon && <i class={`${item.icon} md:hidden`}></i>}
                  </>
                )
            }
          </a>
        </li>
      ))}
    </ul>
  </nav>

  <ThemeSwitch strategy="button">
    <button id="header-theme-toggle-btn--callback" /><button id="header-theme-toggle-btn--trigger" class="i-lucide:sun dark:i-lucide:moon hoverable-text"></button>
  </ThemeSwitch>
</header>

<script>
import { toggleDark } from '../utils/theme'

const callback = document.getElementById('header-theme-toggle-btn--callback')
const trigger = document.getElementById('header-theme-toggle-btn--trigger')
trigger?.addEventListener('click', (e) => {
  const isDark = document.documentElement.classList.contains('dark')
  toggleDark(e, { isDark: !isDark, toggle: () => callback?.click() })
})
</script>
